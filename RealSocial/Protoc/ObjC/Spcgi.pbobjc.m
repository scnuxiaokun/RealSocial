// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spcgi.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Spcgi.pbobjc.h"
 #import "comm/core/Spcgicomm.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SpcgiRoot

@implementation SpcgiRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - SpcgiRoot_FileDescriptor

static GPBFileDescriptor *SpcgiRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"spcgi"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - LoginReq

@implementation LoginReq

@dynamic hasBaseReq, baseReq;
@dynamic hasCode, code;

typedef struct LoginReq__storage_ {
  uint32_t _has_storage_[1];
  RSBaseReq *baseReq;
  NSString *code;
} LoginReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseReq",
        .dataTypeSpecific.className = GPBStringifySymbol(RSBaseReq),
        .number = LoginReq_FieldNumber_BaseReq,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LoginReq__storage_, baseReq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = LoginReq_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LoginReq__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LoginReq class]
                                     rootClass:[SpcgiRoot class]
                                          file:SpcgiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LoginReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001G\000\002D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LoginResp

@implementation LoginResp

@dynamic hasBaseResp, baseResp;
@dynamic hasOpCode, opCode;
@dynamic hasUserName, userName;
@dynamic hasSessionKey, sessionKey;
@dynamic hasProfile, profile;

typedef struct LoginResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t opCode;
  RSBaseResp *baseResp;
  NSString *userName;
  NSData *sessionKey;
  Profile *profile;
} LoginResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResp",
        .dataTypeSpecific.className = GPBStringifySymbol(RSBaseResp),
        .number = LoginResp_FieldNumber_BaseResp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LoginResp__storage_, baseResp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opCode",
        .dataTypeSpecific.className = NULL,
        .number = LoginResp_FieldNumber_OpCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LoginResp__storage_, opCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = LoginResp_FieldNumber_UserName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LoginResp__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionKey",
        .dataTypeSpecific.className = NULL,
        .number = LoginResp_FieldNumber_SessionKey,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LoginResp__storage_, sessionKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "profile",
        .dataTypeSpecific.className = GPBStringifySymbol(Profile),
        .number = LoginResp_FieldNumber_Profile,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LoginResp__storage_, profile),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LoginResp class]
                                     rootClass:[SpcgiRoot class]
                                          file:SpcgiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LoginResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001H\000\002F\000\003H\000\004J\000\005G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpLoadImgReq

@implementation UpLoadImgReq

@dynamic hasBaseReq, baseReq;
@dynamic hasCliImgId, cliImgId;
@dynamic hasTotal, total;
@dynamic hasOffSet, offSet;
@dynamic hasBuff, buff;

typedef struct UpLoadImgReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t total;
  uint32_t offSet;
  RSBaseReq *baseReq;
  NSData *cliImgId;
  NSData *buff;
} UpLoadImgReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseReq",
        .dataTypeSpecific.className = GPBStringifySymbol(RSBaseReq),
        .number = UpLoadImgReq_FieldNumber_BaseReq,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpLoadImgReq__storage_, baseReq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cliImgId",
        .dataTypeSpecific.className = NULL,
        .number = UpLoadImgReq_FieldNumber_CliImgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpLoadImgReq__storage_, cliImgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = UpLoadImgReq_FieldNumber_Total,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpLoadImgReq__storage_, total),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "offSet",
        .dataTypeSpecific.className = NULL,
        .number = UpLoadImgReq_FieldNumber_OffSet,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UpLoadImgReq__storage_, offSet),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "buff",
        .dataTypeSpecific.className = NULL,
        .number = UpLoadImgReq_FieldNumber_Buff,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UpLoadImgReq__storage_, buff),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpLoadImgReq class]
                                     rootClass:[SpcgiRoot class]
                                          file:SpcgiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpLoadImgReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001G\000\002H\000\003E\000\004F\000\005D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpLoadImgResp

@implementation UpLoadImgResp

@dynamic hasBaseResp, baseResp;
@dynamic hasSvrImgId, svrImgId;

typedef struct UpLoadImgResp__storage_ {
  uint32_t _has_storage_[1];
  RSBaseResp *baseResp;
  NSString *svrImgId;
} UpLoadImgResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResp",
        .dataTypeSpecific.className = GPBStringifySymbol(RSBaseResp),
        .number = UpLoadImgResp_FieldNumber_BaseResp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpLoadImgResp__storage_, baseResp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "svrImgId",
        .dataTypeSpecific.className = NULL,
        .number = UpLoadImgResp_FieldNumber_SvrImgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpLoadImgResp__storage_, svrImgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpLoadImgResp class]
                                     rootClass:[SpcgiRoot class]
                                          file:SpcgiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpLoadImgResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001H\000\002H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SyncReq

@implementation SyncReq

@dynamic hasBaseReq, baseReq;
@dynamic hasSyncBuff, syncBuff;

typedef struct SyncReq__storage_ {
  uint32_t _has_storage_[1];
  RSBaseReq *baseReq;
  NSData *syncBuff;
} SyncReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseReq",
        .dataTypeSpecific.className = GPBStringifySymbol(RSBaseReq),
        .number = SyncReq_FieldNumber_BaseReq,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SyncReq__storage_, baseReq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "syncBuff",
        .dataTypeSpecific.className = NULL,
        .number = SyncReq_FieldNumber_SyncBuff,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SyncReq__storage_, syncBuff),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SyncReq class]
                                     rootClass:[SpcgiRoot class]
                                          file:SpcgiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SyncReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001G\000\002H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SyncResp

@implementation SyncResp

@dynamic hasBaseResp, baseResp;
@dynamic hasNextSyncBuff, nextSyncBuff;
@dynamic msgArray, msgArray_Count;

typedef struct SyncResp__storage_ {
  uint32_t _has_storage_[1];
  RSBaseResp *baseResp;
  NSData *nextSyncBuff;
  NSMutableArray *msgArray;
} SyncResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseResp",
        .dataTypeSpecific.className = GPBStringifySymbol(RSBaseResp),
        .number = SyncResp_FieldNumber_BaseResp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SyncResp__storage_, baseResp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextSyncBuff",
        .dataTypeSpecific.className = NULL,
        .number = SyncResp_FieldNumber_NextSyncBuff,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SyncResp__storage_, nextSyncBuff),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "msgArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Msg),
        .number = SyncResp_FieldNumber_MsgArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SyncResp__storage_, msgArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SyncResp class]
                                     rootClass:[SpcgiRoot class]
                                          file:SpcgiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SyncResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001H\000\002L\000\003\000Msg\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
