// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wxproxy.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Wxproxy.pbobjc.h"
 #import "comm/core/Spbuiltintype.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - WxproxyRoot

@implementation WxproxyRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[SpbuiltintypeRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - WxproxyRoot_FileDescriptor

static GPBFileDescriptor *WxproxyRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"wxproxy"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Enum enWxAcct

GPBEnumDescriptor *enWxAcct_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "WxacctApp\000WxacctBiz\000WxacctWxapp\000WxacctBi"
        "zTest\000";
    static const int32_t values[] = {
        enWxAcct_WxacctApp,
        enWxAcct_WxacctBiz,
        enWxAcct_WxacctWxapp,
        enWxAcct_WxacctBizTest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(enWxAcct)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:enWxAcct_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL enWxAcct_IsValidValue(int32_t value__) {
  switch (value__) {
    case enWxAcct_WxacctApp:
    case enWxAcct_WxacctBiz:
    case enWxAcct_WxacctWxapp:
    case enWxAcct_WxacctBizTest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum enWxSex

GPBEnumDescriptor *enWxSex_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "WxsexMale\000WxsexFemale\000";
    static const int32_t values[] = {
        enWxSex_WxsexMale,
        enWxSex_WxsexFemale,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(enWxSex)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:enWxSex_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL enWxSex_IsValidValue(int32_t value__) {
  switch (value__) {
    case enWxSex_WxsexMale:
    case enWxSex_WxsexFemale:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - WxCertInfo

@implementation WxCertInfo

@dynamic hasAppId, appId;
@dynamic hasAppSecret, appSecret;

typedef struct WxCertInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *appId;
  NSString *appSecret;
} WxCertInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appId",
        .dataTypeSpecific.className = NULL,
        .number = WxCertInfo_FieldNumber_AppId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WxCertInfo__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appSecret",
        .dataTypeSpecific.className = NULL,
        .number = WxCertInfo_FieldNumber_AppSecret,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WxCertInfo__storage_, appSecret),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WxCertInfo class]
                                     rootClass:[WxproxyRoot class]
                                          file:WxproxyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WxCertInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001E\000\002I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CodeToAccessTokenReq

@implementation CodeToAccessTokenReq

@dynamic hasWxAcct, wxAcct;
@dynamic hasCode, code;

typedef struct CodeToAccessTokenReq__storage_ {
  uint32_t _has_storage_[1];
  enWxAcct wxAcct;
  NSString *code;
} CodeToAccessTokenReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueEnum = enWxAcct_WxacctApp,
        .core.name = "wxAcct",
        .core.dataTypeSpecific.enumDescFunc = enWxAcct_EnumDescriptor,
        .core.number = CodeToAccessTokenReq_FieldNumber_WxAcct,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(CodeToAccessTokenReq__storage_, wxAcct),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "code",
        .core.dataTypeSpecific.className = NULL,
        .core.number = CodeToAccessTokenReq_FieldNumber_Code,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(CodeToAccessTokenReq__storage_, code),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CodeToAccessTokenReq class]
                                     rootClass:[WxproxyRoot class]
                                          file:WxproxyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(CodeToAccessTokenReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001F\000\002D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CodeToAccessTokenResp

@implementation CodeToAccessTokenResp

@dynamic hasAccessToken, accessToken;
@dynamic hasExpiresIn, expiresIn;
@dynamic hasRefreshToken, refreshToken;
@dynamic hasOpenId, openId;
@dynamic hasScope, scope;
@dynamic hasUnionId, unionId;
@dynamic testArray, testArray_Count;

typedef struct CodeToAccessTokenResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t expiresIn;
  NSString *accessToken;
  NSString *refreshToken;
  NSString *openId;
  NSString *scope;
  NSString *unionId;
  NSMutableArray *testArray;
} CodeToAccessTokenResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accessToken",
        .dataTypeSpecific.className = NULL,
        .number = CodeToAccessTokenResp_FieldNumber_AccessToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CodeToAccessTokenResp__storage_, accessToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expiresIn",
        .dataTypeSpecific.className = NULL,
        .number = CodeToAccessTokenResp_FieldNumber_ExpiresIn,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CodeToAccessTokenResp__storage_, expiresIn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "refreshToken",
        .dataTypeSpecific.className = NULL,
        .number = CodeToAccessTokenResp_FieldNumber_RefreshToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CodeToAccessTokenResp__storage_, refreshToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "openId",
        .dataTypeSpecific.className = NULL,
        .number = CodeToAccessTokenResp_FieldNumber_OpenId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CodeToAccessTokenResp__storage_, openId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scope",
        .dataTypeSpecific.className = NULL,
        .number = CodeToAccessTokenResp_FieldNumber_Scope,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CodeToAccessTokenResp__storage_, scope),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "unionId",
        .dataTypeSpecific.className = NULL,
        .number = CodeToAccessTokenResp_FieldNumber_UnionId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CodeToAccessTokenResp__storage_, unionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "testArray",
        .dataTypeSpecific.className = NULL,
        .number = CodeToAccessTokenResp_FieldNumber_TestArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CodeToAccessTokenResp__storage_, testArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CodeToAccessTokenResp class]
                                     rootClass:[WxproxyRoot class]
                                          file:WxproxyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CodeToAccessTokenResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001K\000\002I\000\003L\000\004F\000\005E\000\006G\000\007\000Test\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RefreshAccessTokenReq

@implementation RefreshAccessTokenReq

@dynamic hasUin, uin;
@dynamic hasWxAcct, wxAcct;
@dynamic hasRefreshToken, refreshToken;

typedef struct RefreshAccessTokenReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t uin;
  enWxAcct wxAcct;
  NSString *refreshToken;
} RefreshAccessTokenReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "uin",
        .core.dataTypeSpecific.className = NULL,
        .core.number = RefreshAccessTokenReq_FieldNumber_Uin,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(RefreshAccessTokenReq__storage_, uin),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueEnum = enWxAcct_WxacctApp,
        .core.name = "wxAcct",
        .core.dataTypeSpecific.enumDescFunc = enWxAcct_EnumDescriptor,
        .core.number = RefreshAccessTokenReq_FieldNumber_WxAcct,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(RefreshAccessTokenReq__storage_, wxAcct),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "refreshToken",
        .core.dataTypeSpecific.className = NULL,
        .core.number = RefreshAccessTokenReq_FieldNumber_RefreshToken,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(RefreshAccessTokenReq__storage_, refreshToken),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RefreshAccessTokenReq class]
                                     rootClass:[WxproxyRoot class]
                                          file:WxproxyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(RefreshAccessTokenReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001C\000\002F\000\003L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RefreshAccessTokenResp

@implementation RefreshAccessTokenResp

@dynamic hasAccessToken, accessToken;
@dynamic hasExpiresIn, expiresIn;
@dynamic hasRefreshToken, refreshToken;
@dynamic hasOpenId, openId;
@dynamic hasScope, scope;

typedef struct RefreshAccessTokenResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t expiresIn;
  NSString *accessToken;
  NSString *refreshToken;
  NSString *openId;
  NSString *scope;
} RefreshAccessTokenResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accessToken",
        .dataTypeSpecific.className = NULL,
        .number = RefreshAccessTokenResp_FieldNumber_AccessToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RefreshAccessTokenResp__storage_, accessToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expiresIn",
        .dataTypeSpecific.className = NULL,
        .number = RefreshAccessTokenResp_FieldNumber_ExpiresIn,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RefreshAccessTokenResp__storage_, expiresIn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "refreshToken",
        .dataTypeSpecific.className = NULL,
        .number = RefreshAccessTokenResp_FieldNumber_RefreshToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RefreshAccessTokenResp__storage_, refreshToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "openId",
        .dataTypeSpecific.className = NULL,
        .number = RefreshAccessTokenResp_FieldNumber_OpenId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RefreshAccessTokenResp__storage_, openId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scope",
        .dataTypeSpecific.className = NULL,
        .number = RefreshAccessTokenResp_FieldNumber_Scope,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RefreshAccessTokenResp__storage_, scope),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RefreshAccessTokenResp class]
                                     rootClass:[WxproxyRoot class]
                                          file:WxproxyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RefreshAccessTokenResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001K\000\002I\000\003L\000\004F\000\005E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsAuthReq

@implementation SnsAuthReq

@dynamic hasUin, uin;
@dynamic hasWxAcct, wxAcct;
@dynamic hasAccessToken, accessToken;
@dynamic hasOpenId, openId;

typedef struct SnsAuthReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t uin;
  enWxAcct wxAcct;
  NSString *accessToken;
  NSString *openId;
} SnsAuthReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "uin",
        .core.dataTypeSpecific.className = NULL,
        .core.number = SnsAuthReq_FieldNumber_Uin,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(SnsAuthReq__storage_, uin),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueEnum = enWxAcct_WxacctApp,
        .core.name = "wxAcct",
        .core.dataTypeSpecific.enumDescFunc = enWxAcct_EnumDescriptor,
        .core.number = SnsAuthReq_FieldNumber_WxAcct,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(SnsAuthReq__storage_, wxAcct),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "accessToken",
        .core.dataTypeSpecific.className = NULL,
        .core.number = SnsAuthReq_FieldNumber_AccessToken,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(SnsAuthReq__storage_, accessToken),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "openId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = SnsAuthReq_FieldNumber_OpenId,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(SnsAuthReq__storage_, openId),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsAuthReq class]
                                     rootClass:[WxproxyRoot class]
                                          file:WxproxyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(SnsAuthReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001C\000\002F\000\003K\000\004F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsAuthResp

@implementation SnsAuthResp


typedef struct SnsAuthResp__storage_ {
  uint32_t _has_storage_[1];
} SnsAuthResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsAuthResp class]
                                     rootClass:[WxproxyRoot class]
                                          file:WxproxyRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(SnsAuthResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsUserInfoReq

@implementation SnsUserInfoReq

@dynamic hasUin, uin;
@dynamic hasWxAcct, wxAcct;
@dynamic hasAccessToken, accessToken;
@dynamic hasOpenId, openId;

typedef struct SnsUserInfoReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t uin;
  enWxAcct wxAcct;
  NSString *accessToken;
  NSString *openId;
} SnsUserInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "uin",
        .core.dataTypeSpecific.className = NULL,
        .core.number = SnsUserInfoReq_FieldNumber_Uin,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(SnsUserInfoReq__storage_, uin),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueEnum = enWxAcct_WxacctApp,
        .core.name = "wxAcct",
        .core.dataTypeSpecific.enumDescFunc = enWxAcct_EnumDescriptor,
        .core.number = SnsUserInfoReq_FieldNumber_WxAcct,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(SnsUserInfoReq__storage_, wxAcct),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "accessToken",
        .core.dataTypeSpecific.className = NULL,
        .core.number = SnsUserInfoReq_FieldNumber_AccessToken,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(SnsUserInfoReq__storage_, accessToken),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "openId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = SnsUserInfoReq_FieldNumber_OpenId,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(SnsUserInfoReq__storage_, openId),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsUserInfoReq class]
                                     rootClass:[WxproxyRoot class]
                                          file:WxproxyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(SnsUserInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001C\000\002F\000\003K\000\004F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SnsUserInfoResp

@implementation SnsUserInfoResp

@dynamic hasOpenId, openId;
@dynamic hasNickName, nickName;
@dynamic hasSex, sex;
@dynamic hasProvince, province;
@dynamic hasCity, city;
@dynamic hasCountry, country;
@dynamic hasHeadImgURL, headImgURL;
@dynamic hasUnionId, unionId;

typedef struct SnsUserInfoResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t sex;
  NSString *openId;
  NSString *nickName;
  NSString *province;
  NSString *city;
  NSString *country;
  NSString *headImgURL;
  NSString *unionId;
} SnsUserInfoResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "openId",
        .dataTypeSpecific.className = NULL,
        .number = SnsUserInfoResp_FieldNumber_OpenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SnsUserInfoResp__storage_, openId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = SnsUserInfoResp_FieldNumber_NickName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SnsUserInfoResp__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = SnsUserInfoResp_FieldNumber_Sex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SnsUserInfoResp__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "province",
        .dataTypeSpecific.className = NULL,
        .number = SnsUserInfoResp_FieldNumber_Province,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SnsUserInfoResp__storage_, province),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = SnsUserInfoResp_FieldNumber_City,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SnsUserInfoResp__storage_, city),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "country",
        .dataTypeSpecific.className = NULL,
        .number = SnsUserInfoResp_FieldNumber_Country,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SnsUserInfoResp__storage_, country),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headImgURL",
        .dataTypeSpecific.className = NULL,
        .number = SnsUserInfoResp_FieldNumber_HeadImgURL,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SnsUserInfoResp__storage_, headImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "unionId",
        .dataTypeSpecific.className = NULL,
        .number = SnsUserInfoResp_FieldNumber_UnionId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SnsUserInfoResp__storage_, unionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SnsUserInfoResp class]
                                     rootClass:[WxproxyRoot class]
                                          file:WxproxyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SnsUserInfoResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001F\000\002H\000\003C\000\004H\000\005D\000\006G\000\007H!!\000\010G\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AccessTokenReq

@implementation AccessTokenReq

@dynamic hasWxAcct, wxAcct;

typedef struct AccessTokenReq__storage_ {
  uint32_t _has_storage_[1];
  enWxAcct wxAcct;
} AccessTokenReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueEnum = enWxAcct_WxacctApp,
        .core.name = "wxAcct",
        .core.dataTypeSpecific.enumDescFunc = enWxAcct_EnumDescriptor,
        .core.number = AccessTokenReq_FieldNumber_WxAcct,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(AccessTokenReq__storage_, wxAcct),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AccessTokenReq class]
                                     rootClass:[WxproxyRoot class]
                                          file:WxproxyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(AccessTokenReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AccessTokenResp

@implementation AccessTokenResp

@dynamic hasAccessToken, accessToken;
@dynamic hasExpiresIn, expiresIn;

typedef struct AccessTokenResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t expiresIn;
  NSString *accessToken;
} AccessTokenResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accessToken",
        .dataTypeSpecific.className = NULL,
        .number = AccessTokenResp_FieldNumber_AccessToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AccessTokenResp__storage_, accessToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expiresIn",
        .dataTypeSpecific.className = NULL,
        .number = AccessTokenResp_FieldNumber_ExpiresIn,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AccessTokenResp__storage_, expiresIn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AccessTokenResp class]
                                     rootClass:[WxproxyRoot class]
                                          file:WxproxyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AccessTokenResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001K\000\002I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserInfoReq

@implementation UserInfoReq

@dynamic hasWxAcct, wxAcct;
@dynamic hasOpenid, openid;
@dynamic hasAccessToken, accessToken;

typedef struct UserInfoReq__storage_ {
  uint32_t _has_storage_[1];
  enWxAcct wxAcct;
  NSString *openid;
  NSString *accessToken;
} UserInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueEnum = enWxAcct_WxacctApp,
        .core.name = "wxAcct",
        .core.dataTypeSpecific.enumDescFunc = enWxAcct_EnumDescriptor,
        .core.number = UserInfoReq_FieldNumber_WxAcct,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(UserInfoReq__storage_, wxAcct),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "openid",
        .core.dataTypeSpecific.className = NULL,
        .core.number = UserInfoReq_FieldNumber_Openid,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(UserInfoReq__storage_, openid),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "accessToken",
        .core.dataTypeSpecific.className = NULL,
        .core.number = UserInfoReq_FieldNumber_AccessToken,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(UserInfoReq__storage_, accessToken),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserInfoReq class]
                                     rootClass:[WxproxyRoot class]
                                          file:WxproxyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(UserInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001F\000\003K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserInfoResp

@implementation UserInfoResp

@dynamic hasSubscribe, subscribe;
@dynamic hasOpenId, openId;
@dynamic hasNickName, nickName;
@dynamic hasSex, sex;
@dynamic hasCity, city;
@dynamic hasCountry, country;
@dynamic hasProvince, province;
@dynamic hasLanguage, language;
@dynamic hasHeadImgURL, headImgURL;
@dynamic hasSubscribeTime, subscribeTime;
@dynamic hasUnionId, unionId;
@dynamic hasRemark, remark;
@dynamic hasGroupId, groupId;
@dynamic tagIdListArray, tagIdListArray_Count;

typedef struct UserInfoResp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t sex;
  uint32_t subscribeTime;
  NSString *subscribe;
  NSString *openId;
  NSString *nickName;
  NSString *city;
  NSString *country;
  NSString *province;
  NSString *language;
  NSString *headImgURL;
  NSString *unionId;
  NSString *remark;
  NSString *groupId;
  GPBUInt32Array *tagIdListArray;
} UserInfoResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "subscribe",
        .dataTypeSpecific.className = NULL,
        .number = UserInfoResp_FieldNumber_Subscribe,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserInfoResp__storage_, subscribe),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "openId",
        .dataTypeSpecific.className = NULL,
        .number = UserInfoResp_FieldNumber_OpenId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserInfoResp__storage_, openId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.className = NULL,
        .number = UserInfoResp_FieldNumber_NickName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UserInfoResp__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sex",
        .dataTypeSpecific.className = NULL,
        .number = UserInfoResp_FieldNumber_Sex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UserInfoResp__storage_, sex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "city",
        .dataTypeSpecific.className = NULL,
        .number = UserInfoResp_FieldNumber_City,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UserInfoResp__storage_, city),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "country",
        .dataTypeSpecific.className = NULL,
        .number = UserInfoResp_FieldNumber_Country,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UserInfoResp__storage_, country),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "province",
        .dataTypeSpecific.className = NULL,
        .number = UserInfoResp_FieldNumber_Province,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(UserInfoResp__storage_, province),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "language",
        .dataTypeSpecific.className = NULL,
        .number = UserInfoResp_FieldNumber_Language,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(UserInfoResp__storage_, language),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headImgURL",
        .dataTypeSpecific.className = NULL,
        .number = UserInfoResp_FieldNumber_HeadImgURL,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(UserInfoResp__storage_, headImgURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subscribeTime",
        .dataTypeSpecific.className = NULL,
        .number = UserInfoResp_FieldNumber_SubscribeTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(UserInfoResp__storage_, subscribeTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "unionId",
        .dataTypeSpecific.className = NULL,
        .number = UserInfoResp_FieldNumber_UnionId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(UserInfoResp__storage_, unionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = UserInfoResp_FieldNumber_Remark,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(UserInfoResp__storage_, remark),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = UserInfoResp_FieldNumber_GroupId,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(UserInfoResp__storage_, groupId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tagIdListArray",
        .dataTypeSpecific.className = NULL,
        .number = UserInfoResp_FieldNumber_TagIdListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserInfoResp__storage_, tagIdListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserInfoResp class]
                                     rootClass:[WxproxyRoot class]
                                          file:WxproxyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserInfoResp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\016\001I\000\002F\000\003H\000\004C\000\005D\000\006G\000\007H\000\010H\000\tH!!\000\nM\000\013G\000\014F\000\r"
        "G\000\016\000TagIdList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
