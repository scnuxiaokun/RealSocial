// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm/core/spbuiltintype.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Spbuiltintype.pbobjc.h"
// #import "GPBDescriptor.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SpbuiltintypeRoot

@implementation SpbuiltintypeRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    static GPBExtensionDescription descriptions[] = {
      {
        .defaultValue.valueUInt32 = 0U,
        .singletonName = GPBStringifySymbol(SpbuiltintypeRoot_cmdId),
        .extendedClass = GPBStringifySymbol(GPBMethodOptions),
        .messageOrGroupClassName = NULL,
        .enumDescriptorFunc = NULL,
        .fieldNumber = 1000,
        .dataType = GPBDataTypeUInt32,
        .options = GPBExtensionNone,
      },
      {
        .defaultValue.valueString = nil,
        .singletonName = GPBStringifySymbol(SpbuiltintypeRoot_optString),
        .extendedClass = GPBStringifySymbol(GPBMethodOptions),
        .messageOrGroupClassName = NULL,
        .enumDescriptorFunc = NULL,
        .fieldNumber = 1001,
        .dataType = GPBDataTypeString,
        .options = GPBExtensionNone,
      },
      {
        .defaultValue.valueString = nil,
        .singletonName = GPBStringifySymbol(SpbuiltintypeRoot_usage),
        .extendedClass = GPBStringifySymbol(GPBMethodOptions),
        .messageOrGroupClassName = NULL,
        .enumDescriptorFunc = NULL,
        .fieldNumber = 1002,
        .dataType = GPBDataTypeString,
        .options = GPBExtensionNone,
      },
      {
        .defaultValue.valueInt32 = 0,
        .singletonName = GPBStringifySymbol(SpbuiltintypeRoot_port),
        .extendedClass = GPBStringifySymbol(GPBServiceOptions),
        .messageOrGroupClassName = NULL,
        .enumDescriptorFunc = NULL,
        .fieldNumber = 1000,
        .dataType = GPBDataTypeInt32,
        .options = GPBExtensionNone,
      },
    };
    for (size_t i = 0; i < sizeof(descriptions) / sizeof(descriptions[0]); ++i) {
      GPBExtensionDescriptor *extension =
          [[GPBExtensionDescriptor alloc] initWithExtensionDescription:&descriptions[i]];
      [registry addExtension:extension];
      [self globallyRegisterExtension:extension];
      [extension release];
    }
    // None of the imports (direct or indirect) defined extensions, so no need to add
    // them to this registry.
  }
  return registry;
}

@end

#pragma mark - SpbuiltintypeRoot_FileDescriptor

static GPBFileDescriptor *SpbuiltintypeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"spcomm"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - SPBuiltinInt32_PB

@implementation SPBuiltinInt32_PB

@dynamic hasVal, val;

typedef struct SPBuiltinInt32_PB__storage_ {
  uint32_t _has_storage_[1];
  int32_t val;
} SPBuiltinInt32_PB__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "val",
        .dataTypeSpecific.className = NULL,
        .number = SPBuiltinInt32_PB_FieldNumber_Val,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SPBuiltinInt32_PB__storage_, val),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SPBuiltinInt32_PB class]
                                     rootClass:[SpbuiltintypeRoot class]
                                          file:SpbuiltintypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SPBuiltinInt32_PB__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SPBuiltinUint32_PB

@implementation SPBuiltinUint32_PB

@dynamic hasVal, val;

typedef struct SPBuiltinUint32_PB__storage_ {
  uint32_t _has_storage_[1];
  uint32_t val;
} SPBuiltinUint32_PB__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "val",
        .dataTypeSpecific.className = NULL,
        .number = SPBuiltinUint32_PB_FieldNumber_Val,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SPBuiltinUint32_PB__storage_, val),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SPBuiltinUint32_PB class]
                                     rootClass:[SpbuiltintypeRoot class]
                                          file:SpbuiltintypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SPBuiltinUint32_PB__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SPBuiltinInt64_PB

@implementation SPBuiltinInt64_PB

@dynamic hasVal, val;

typedef struct SPBuiltinInt64_PB__storage_ {
  uint32_t _has_storage_[1];
  int64_t val;
} SPBuiltinInt64_PB__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "val",
        .dataTypeSpecific.className = NULL,
        .number = SPBuiltinInt64_PB_FieldNumber_Val,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SPBuiltinInt64_PB__storage_, val),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SPBuiltinInt64_PB class]
                                     rootClass:[SpbuiltintypeRoot class]
                                          file:SpbuiltintypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SPBuiltinInt64_PB__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SPBuiltinUint64_PB

@implementation SPBuiltinUint64_PB

@dynamic hasVal, val;

typedef struct SPBuiltinUint64_PB__storage_ {
  uint32_t _has_storage_[1];
  uint64_t val;
} SPBuiltinUint64_PB__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "val",
        .dataTypeSpecific.className = NULL,
        .number = SPBuiltinUint64_PB_FieldNumber_Val,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SPBuiltinUint64_PB__storage_, val),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SPBuiltinUint64_PB class]
                                     rootClass:[SpbuiltintypeRoot class]
                                          file:SpbuiltintypeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SPBuiltinUint64_PB__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SPBuiltinEmpty_PB

@implementation SPBuiltinEmpty_PB


typedef struct SPBuiltinEmpty_PB__storage_ {
  uint32_t _has_storage_[1];
} SPBuiltinEmpty_PB__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SPBuiltinEmpty_PB class]
                                     rootClass:[SpbuiltintypeRoot class]
                                          file:SpbuiltintypeRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(SPBuiltinEmpty_PB__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
